import streamlit as st
import openai
import requests
from docx import Document
from datetime import date
from typing import List

# ---------- Helper functions ---------- #

def init_openai(api_key: str):
    """Initialize OpenAI with user-provided key or stop execution."""
    if api_key:
        openai.api_key = api_key
    else:
        st.error("Por favor ingresa una clave de API de OpenAI v√°lida.")
        st.stop()


def generate_introduction(title: str, objective: str, word_target: int = 4500) -> str:
    """Generate the thesis introduction (~9 A4 pages ‚âà 4 500 words)."""

    prompt = (
        "Eres un asistente experto en redacci√≥n acad√©mica. "
        "Redactar√°s una introducci√≥n de proyecto de tesis bas√°ndote en el siguiente t√≠tulo y objetivo general. "
        "La introducci√≥n se construir√° en prosa, sin subt√≠tulos, en tercera persona y tiempo futuro indicativo. "
        "Cada p√°rrafo tendr√° un m√°ximo de 10 l√≠neas y el texto completo tendr√° al menos 9 p√°ginas A4 (~4500+ palabras). "
        "La estructura de la introducci√≥n ser√°:\n"
        "1. Importancia y plausibilidad del problema (1-2 p√°rrafos).\n"
        "2. Impacto global, regional y nacional (1-2 p√°rrafos).\n"
        "3. Vac√≠os de la literatura (1-2 p√°rrafos).\n"
        "4. Contribuci√≥n a los ODS (1 p√°rrafo).\n"
        "5. Pregunta de investigaci√≥n (1 p√°rrafo, forma interrogativa).\n"
        "6. Justificaci√≥n te√≥rica (1 p√°rrafo).\n"
        "7. Justificaci√≥n pr√°ctica (1 p√°rrafo).\n"
        "8. Justificaci√≥n metodol√≥gica (1 p√°rrafo).\n"
        "9. Justificaci√≥n social (1 p√°rrafo).\n"
        "Despu√©s de la introducci√≥n debes escribir '===ANTECEDENTES===' y esperar a que el sistema agregue antecedentes.\n"
        f"T√≠tulo: {title}\n"
        f"Objetivo general: {objective}\n"
        f"Longitud m√≠nima: {word_target} palabras.\n"
        "Devuelve solo el texto de la introducci√≥n."
    )

    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
        max_tokens=8192  # Ajusta si tu plan admite menos tokens
    )
    return response.choices[0].message["content"]


def search_pubmed(query: str, n: int = 10) -> List[dict]:
    """Retrieve PubMed abstracts via NCBI E-utilities."""

    base = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/"
    ids = requests.get(
        base + "esearch.fcgi",
        params={"db": "pubmed", "term": query, "retmax": n, "retmode": "json"}
    ).json()["esearchresult"]["idlist"]

    abstracts = []
    for pmid in ids:
        xml = requests.get(base + "efetch.fcgi", params={"db": "pubmed", "id": pmid, "retmode": "xml"}).text
        import re, html
        title = re.search(r"<ArticleTitle>(.*?)</ArticleTitle>", xml, re.S)
        abstract = re.search(r"<AbstractText.*?>(.*?)</AbstractText>", xml, re.S)
        authors = re.findall(r"<LastName>(.*?)</LastName>.*?<Initials>(.*?)</Initials>", xml, re.S)
        year = re.search(r"<PubDate>.*?<Year>(\\d{4})</Year>", xml, re.S)
        if not (title and abstract):
            continue
        if authors:
            first = f"{authors[0][0]}, {authors[0][1][0]}."
            author_cite = first + (" et al." if len(authors) > 3 else "")
        else:
            author_cite = "Autor desconocido"
        pub_year = year.group(1) if year else "s.f."
        abstracts.append({
            "cite": f"{author_cite} ({pub_year})",
            "abstract": html.unescape(abstract.group(1))
        })
    return abstracts[:n]


def paraphrase(text: str, api_key: str, word_count: int = 130) -> str:
    """Paraphrase a PubMed abstract to ~130 words in Spanish."""

    prompt = (
        f"Parafrasea el siguiente resumen en espa√±ol acad√©mico, sin plagio, en aproximadamente {word_count} palabras:\n{text}"
    )
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.4,
        max_tokens=512
    )
    return response.choices[0].message["content"]


def build_antecedents(abstracts: List[dict], api_key: str) -> str:
    """Compose antecedent paragraphs from abstracts."""

    paragraphs = []
    for item in abstracts:
        para = paraphrase(item["abstract"], api_key)
        paragraphs.append(f"{item['cite']} {para}")
    return "\n\n".join(paragraphs)


def generate_theoretical_bases(title: str, objective: str, api_key: str) -> str:
    """Generate theoretical framework section."""

    prompt = (
        "Redacta las bases te√≥ricas pertinentes a la pregunta de investigaci√≥n, "
        "incluyendo enfoques conceptuales y variables clave. "
        "Redacta en prosa acad√©mica, tercera persona, futuro indicativo:\n"
        f"T√≠tulo: {title}\nObjetivo general: {objective}"
    )
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
        max_tokens=2048
    )
    return resp.choices[0].message["content"]


def generate_hypotheses(objective: str, api_key: str) -> str:
    """Formulate research and statistical hypotheses."""

    prompt = (
        "Formula las hip√≥tesis de investigaci√≥n y estad√≠sticas (nula y alternativa) "
        "basadas en el siguiente objetivo general. "
        "Presenta primero la hip√≥tesis de investigaci√≥n y luego las estad√≠sticas separadas:\n"
        f"{objective}"
    )
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
        max_tokens=512
    )
    return resp.choices[0].message["content"]


def build_docx(intro: str, antecedentes: str, teoricas: str, hipotesis: str) -> bytes:
    """Build a DOCX with all generated sections and return it as bytes."""

    doc = Document()
    doc.add_heading("Proyecto de Tesis ‚Äì Secciones Generadas", level=1)

    doc.add_heading("Introducci√≥n", level=2)
    for p in intro.split("\n"):
        doc.add_paragraph(p)
    doc.add_page_break()

    doc.add_heading("Antecedentes", level=2)
    for p in antecedentes.split("\n"):
        doc.add_paragraph(p)
    doc.add_page_break()

    doc.add_heading("Bases Te√≥ricas", level=2)
    for p in teoricas.split("\n"):
        doc.add_paragraph(p)
    doc.add_page_break()

    doc.add_heading("Hip√≥tesis", level=2)
    for p in hipotesis.split("\n"):
        doc.add_paragraph(p)

    from io import BytesIO
    buffer = BytesIO()
    doc.save(buffer)
    return buffer.getvalue()

# ---------- Streamlit UI ---------- #

st.set_page_config(page_title="Generador de Introducciones de Tesis", layout="wide")
st.title("üìù Generador Autom√°tico de Introducciones de Tesis")

with st.sidebar:
    st.header("Configuraci√≥n")
    api_key = st.text_input("OpenAI API Key", type="password")
    title_input = st.text_input("T√≠tulo de la Investigaci√≥n")
    objective_input = st.text_area("Objetivo General")
    generate_btn = st.button("Generar Introducci√≥n")

if generate_btn:
    init_openai(api_key)

    with st.spinner("Generando introducci√≥n..."):
        intro_text = generate_introduction(title_input, objective_input)

    st.subheader("Introducci√≥n")
    st.markdown(intro_text)

    with st.spinner("Buscando antecedentes en PubMed..."):
        abstracts = search_pubmed(title_input or objective_input)
        antecedentes_text = build_antecedents(abstracts, api_key)

    st.subheader("Antecedentes")
    st.markdown(antecedentes_text)

    with st.spinner("Generando bases te√≥ricas..."):
        teoricas_text = generate_theoretical_bases(title_input, objective_input, api_key)

    st.subheader("Bases Te√≥ricas")
    st.markdown(teoricas_text)

    with st.spinner("Generando hip√≥tesis..."):
        hipotesis_text = generate_hypotheses(objective_input, api_key)

    st.subheader("Hip√≥tesis")
    st.markdown(hipotesis_text)

    docx_bytes = build_docx(intro_text, antecedentes_text, teoricas_text, hipotesis_text)
    st.download_button(
        label="Descargar DOCX",
        data=docx_bytes,
        file_name=f"Tesis_{date.today()}.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

st.markdown("""
---
### ¬øC√≥mo funciona?
1. Ingresa tu clave de API de OpenAI.
2. Escribe el t√≠tulo o el objetivo general de tu investigaci√≥n.
3. Haz clic en **Generar Introducci√≥n** y espera los resultados.
4. Descarga el documento final en formato **.docx**.
""")
