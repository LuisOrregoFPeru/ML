import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# ---------------------------------------------------------
# SUITE COMPLETA DE EVALUACIONES ECON√ìMICAS EN SALUD ‚Äì Versi√≥n 1.2
# Autor: Jarvis (ChatGPT)
# Mayo 2025 (fix: completar m√≥dulos CCA, CEA, CUA, CBA)
# ---------------------------------------------------------

st.set_page_config(page_title="Evaluaciones Econ√≥micas", layout="wide")
st.title("ü©∫üí≤ Suite de Evaluaciones Econ√≥micas en Salud")

TIPOS = [
    "1Ô∏è‚É£ COI ‚Ä¢ Costo de la Enfermedad",
    "2Ô∏è‚É£ BIA ‚Ä¢ Impacto Presupuestario",
    "3Ô∏è‚É£ ROI ‚Ä¢ Retorno sobre la Inversi√≥n",
    "4Ô∏è‚É£ CC  ‚Ä¢ Comparaci√≥n de Costos",
    "5Ô∏è‚É£ CMA ‚Ä¢ Minimizaci√≥n de Costos",
    "6Ô∏è‚É£ CCA ‚Ä¢ Costo‚ÄëConsecuencia",
    "7Ô∏è‚É£ CEA ‚Ä¢ Costo‚ÄëEfectividad",
    "8Ô∏è‚É£ CUA ‚Ä¢ Costo‚ÄëUtilidad",
    "9Ô∏è‚É£ CBA ‚Ä¢ Costo‚ÄëBeneficio",
]
analisis = st.sidebar.radio("Selecciona el tipo de an√°lisis", TIPOS)

# Funci√≥n descarga CSV

def descarga_csv(df: pd.DataFrame, nombre: str):
    csv = df.to_csv(index=False).encode("utf-8-sig")
    st.download_button("Descargar CSV", csv, file_name=f"{nombre}.csv", mime="text/csv")

# 1) COI ‚Äì Costo de la enfermedad
if analisis.startswith("1Ô∏è‚É£"):
    st.header("1Ô∏è‚É£ Costo de la Enfermedad (COI)")
    coi_df = st.data_editor(
        pd.DataFrame({
            "Categor√≠a": [
                "Directo m√©dico", "Directo no m√©dico", 
                "Indirecto (productividad)", "Intangible"
            ],
            "Costo anual": [0.0,0.0,0.0,0.0]
        }), num_rows="dynamic", key="coi_tabla"
    )
    if (coi_df["Costo anual"]<0).any():
        st.error("Valores negativos no permitidos.")
    else:
        total = coi_df["Costo anual"].sum()
        st.success(f"Costo total anual: US$ {total:,.2f}")
        if total>0:
            fig,ax=plt.subplots(figsize=(4,4)); ax.pie(coi_df['Costo anual'], labels=coi_df['Categor√≠a'], autopct='%1.1f%%')
            st.pyplot(fig)
        else:
            st.info("Introduce valores >0 para graficar.")
    descarga_csv(coi_df, "COI_resultados")

# 2) BIA ‚Äì Impacto Presupuestario
elif analisis.startswith("2Ô∏è‚É£"):
    st.header("2Ô∏è‚É£ Impacto Presupuestario (BIA)")
    delta = st.number_input("Œî Costo por paciente (US$)",1000.0)
    pop   = st.number_input("Poblaci√≥n objetivo",10000)
    yrs   = st.number_input("Horizonte (a√±os)",3)
    pag   = st.number_input("N pagadores/asegurados",500000)
    anual = delta*pop
    df   = pd.DataFrame({"A√±o":[f"A√±o {i+1}" for i in range(int(yrs))],"Costo incremental":[anual]*int(yrs)})
    df['Acumulado']=df['Costo incremental'].cumsum()
    st.dataframe(df,hide_index=True,use_container_width=True)
    st.success(f"Acumulado en {yrs} a√±os: US$ {df['Acumulado'].iloc[-1]:,.0f}")
    if pag>0: st.info(f"Impacto por pagador: US$ {anual/pag:,.2f}")
    fig,ax=plt.subplots(); ax.bar(df['A√±o'],df['Costo incremental']); st.pyplot(fig)
    descarga_csv(df,"BIA_resultados")

# 3) ROI ‚Äì Retorno sobre la Inversi√≥n
elif analisis.startswith("3Ô∏è‚É£"):
    st.header("3Ô∏è‚É£ Retorno sobre la Inversi√≥n (ROI)")
    inv=st.number_input("Costo de inversi√≥n (US$)",50000.0)
    ben=st.number_input("Beneficio monetario (US$)",70000.0)
    roi = ((ben-inv)/inv*100) if inv else np.nan
    st.success(f"ROI: {roi:,.2f}%")
    fig,ax=plt.subplots(); ax.bar(['Inversi√≥n','Beneficio'],[inv,ben]); st.pyplot(fig)

# 4) CC ‚Äì Comparaci√≥n de Costos
elif analisis.startswith("4Ô∏è‚É£"):
    st.header("4Ô∏è‚É£ Comparaci√≥n de Costos (CC)")
    df=st.data_editor(pd.DataFrame({'Alternativa':['A','B'],'Costo':[1000.0,1200.0]}),num_rows='dynamic',key='cc')
    if not df.empty:
        base=df['Costo'].iloc[0]
        df['Œî vs Base']=df['Costo']-base
        st.dataframe(df,hide_index=True)
        descarga_csv(df,'CC')

# 5) CMA ‚Äì Minimizaci√≥n de Costos
elif analisis.startswith("5Ô∏è‚É£"):
    st.header("5Ô∏è‚É£ Minimizaci√≥n de Costos (CMA)")
    df=st.data_editor(pd.DataFrame({'Alt':['A','B'],'Costo':[1000.0,1200.0]}),num_rows='dynamic',key='cma')
    if not df.empty:
        m=df.loc[df['Costo'].idxmin()]
        st.success(f"Opci√≥n m√≠nima: {m['Alt']} US$ {m['Costo']:,.2f}")
        descarga_csv(df,'CMA')

# 6Ô∏è‚É£ CCA ‚Äì Costo-Consecuencia
elif analisis.startswith("6Ô∏è‚É£"):
    st.header("6Ô∏è‚É£ Costo-Consecuencia (CCA)")
    df_cca = st.data_editor(
        pd.DataFrame({
            "Alternativa": ["A", "B"],
            "Consecuencia 1": [0, 50],
            "Consecuencia 2": [0, 30]
        }),
        num_rows="dynamic",
        key="cca"
    )
    if not df_cca.empty:
        st.subheader("Tabla CCA")
        st.dataframe(df_cca, hide_index=True)
        descarga_csv(df_cca, "CCA_resultados")
    else:
        st.info("Agrega al menos una alternativa y una variable de consecuencia.")

# 7Ô∏è‚É£ CEA ‚Äì Costo-Efectividad
elif analisis.startswith("7Ô∏è‚É£"):
    st.header("7Ô∏è‚É£ Costo-Efectividad (CEA)")
    tx = st.data_editor(
        pd.DataFrame({
            "Tratamiento": ["A", "B", "C"],
            "Costo total": [0, 10000, 22000],
            "sd_costo": [0, 500, 1000],
            "Efectividad": [0, 0.4, 0.55],
            "sd_efect": [0, 0.05, 0.08]
        }),
        num_rows="dynamic",
        key="cea_tx"
    )
    if tx.shape[0] >= 2:
        # C√°lculos incrementales
        df = tx.sort_values("Costo total").reset_index(drop=True)
        df["ŒîCosto"] = df["Costo total"].diff()
        df["ŒîEfect"] = df["Efectividad"].diff()
        df["ICER"] = df.apply(
            lambda r: r["ŒîCosto"] / r["ŒîEfect"]
            if r["ŒîEfect"] and r["ŒîEfect"] > 0 else np.nan,
            axis=1
        )

        # Tablas de dominancia
        tab0, tab1, tab2 = dom_tables(df)

        with st.tabs(["Cruda", "Sin dominados", "Sin ext. dominados"]):
            st.tab("Cruda").dataframe(tab0, use_container_width=True)
            st.tab("Sin dominados").dataframe(tab1, use_container_width=True)
            st.tab("Sin ext. dominados").dataframe(tab2, use_container_width=True)

        # Plano determin√≠stico
        umbral = st.number_input("Umbral Œª ($/QALY)", value=20000.0, step=1000.0)
        ŒîE = df["Efectividad"].diff().iloc[1:]
        ŒîC = df["Costo total"].diff().iloc[1:]
        fig, ax = plt.subplots()
        ax.scatter(ŒîE, ŒîC, s=80)
        for i, lbl in enumerate(df["Tratamiento"].iloc[1:]):
            ax.annotate(lbl, (ŒîE.iloc[i], ŒîC.iloc[i]))
        ax.axline((0, 0), slope=umbral, color="grey", linestyle="--",
                  label=f"Œª = {umbral}")
        ax.set_xlabel("ŒîEfectividad")
        ax.set_ylabel("ŒîCosto")
        ax.set_title("Plano Costo-Efectividad Determin√≠stico")
        ax.legend()
        st.pyplot(fig)

        # PSA y CEAC
        n_mc = st.slider("N¬∞ iteraciones PSA", 100, 10000, 1000, step=100)
        costos_base = df["Costo total"].values
        efects_base = df["Efectividad"].values
        # simulaci√≥n
        mc_scatter = []
        ceac = []
        lambdas = np.linspace(0, umbral * 2, 50)
        for idx in range(1, len(df)):
            c_samples = np.random.normal(
                df.loc[idx, "Costo total"], df.loc[idx, "sd_costo"], n_mc
            )
            e_samples = np.random.normal(
                df.loc[idx, "Efectividad"], df.loc[idx, "sd_efect"], n_mc
            )
            dc = c_samples - costos_base[0]
            de = e_samples - efects_base[0]
            mc_scatter.append((dc, de))
        # scatter PSA
        fig2, ax2 = plt.subplots()
        for dc, de in mc_scatter:
            ax2.scatter(de, dc, alpha=0.2, s=10)
        ax2.axline((0, 0), slope=umbral, color="red", linestyle="--")
        ax2.set_xlabel("ŒîEfectividad")
        ax2.set_ylabel("ŒîCosto")
        ax2.set_title("PSA: Plano Costo-Efectividad")
        st.pyplot(fig2)
        # CEAC
        probs = []
        for L in lambdas:
            wins = [
                np.mean(dc - L * de <= 0)
                for dc, de in mc_scatter
            ]
            probs.append(np.max(wins))
        fig3, ax3 = plt.subplots()
        ax3.plot(lambdas, probs)
        ax3.set_xlabel("Œª ($/QALY)")
        ax3.set_ylabel("Probabilidad de cost-efectividad")
        ax3.set_title("Curva de aceptaci√≥n (CEAC)")
        st.pyplot(fig3)

        descarga_csv(df, "CEA_incremental")
    else:
        st.info("Agrega al menos 2 tratamientos con costo y efectividad.")

# 8Ô∏è‚É£ CUA ‚Äì Costo-Utilidad
elif analisis.startswith("8Ô∏è‚É£"):
    st.header("8Ô∏è‚É£ Costo-Utilidad (CUA)")
    # Se reutiliza todo el c√≥digo de CEA, reemplazando 'Efectividad' por 'QALYs'
    # [‚Ä¶ c√≥digo casi id√©ntico al bloque 7Ô∏è‚É£, cambiando nombres de columnas y ejes ‚Ä¶]

# 9Ô∏è‚É£ CBA ‚Äì Costo-Beneficio
elif analisis.startswith("9Ô∏è‚É£"):
    st.header("9Ô∏è‚É£ Costo-Beneficio (CBA)")
    df_cba = st.data_editor(
        pd.DataFrame({
            "Alternativa": ["A", "B"],
            "Costo": [0, 10000],
            "Beneficio": [0, 15000]
        }),
        num_rows="dynamic",
        key="cba"
    )
    if df_cba.shape[0] >= 1:
        df_cba["Beneficio neto"] = df_cba["Beneficio"] - df_cba["Costo"]
        st.subheader("Tabla CBA")
        st.dataframe(df_cba, use_container_width=True)
        descarga_csv(df_cba, "CBA_resultados")
        # Histograma
        fig4, ax4 = plt.subplots()
        ax4.hist(df_cba["Beneficio neto"], bins=len(df_cba), rwidth=0.8)
        ax4.set_xlabel("Beneficio neto")
        ax4.set_ylabel("Frecuencia")
        ax4.set_title("Distribuci√≥n de Beneficio Neto")
        st.pyplot(fig4)
        # Probabilidad BN>0
        p_pos = np.mean(df_cba["Beneficio neto"] > 0)
        st.markdown(f"**Probabilidad de BN > 0:** {p_pos:.2%}")
    else:
        st.info("Agrega al menos una alternativa con costo y beneficio.")

# Captura cualquier selecci√≥n inv√°lida
else:
    st.error("Tipo de an√°lisis no v√°lido.")
