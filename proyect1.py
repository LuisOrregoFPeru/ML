import streamlit as st
import textwrap
from docx import Document
from io import BytesIO
from datetime import date

# ---------------------------------------------------------
# Generador de Introducciones de Tesis ‚Äì Versi√≥n Local
# ---------------------------------------------------------
# ‚Ä¢ No requiere claves API ni acceso a modelos externos.
# ‚Ä¢ Crea Introducci√≥n (‚â•‚ÄØ9 p√°gs. A4), Bases Te√≥ricas e Hip√≥tesis.
# ‚Ä¢ Exporta las secciones a un archivo .docx.
# ---------------------------------------------------------

# ‚ö†Ô∏è set_page_config debe ser la PRIMERA llamada Streamlit
st.set_page_config(page_title="Generador de Introducciones de Tesis", layout="wide")

# --------- Utilidades de formato ---------
LINE_WIDTH = 100  # caracteres ‚âà 10‚Äë12 palabras por l√≠nea
PARA_WORDS = 90   # palabras objetivo por p√°rrafo

def wrap(text: str) -> str:
    return textwrap.fill(text, width=LINE_WIDTH)

def build_paragraph(core: str) -> str:
    """Garantiza p√°rrafos ‚â• PARA_WORDS palabras. Mantiene ‚â§ 10 l√≠neas aprox."""
    base = core.strip()
    while len(base.split()) < PARA_WORDS:
        base += " " + core.strip()
    return wrap(base)

# --------- Generaci√≥n de Introducci√≥n ---------
def generate_introduction(title: str, objective: str, min_words: int = 4500) -> str:
    title_l = title.lower().strip()
    # Bloques base
    blocks = [
        f"El estudio abordar√° la problem√°tica relacionada con {title_l}, consider√°ndose un asunto prioritario para la salud p√∫blica y la gesti√≥n econ√≥mica.",
        "El inter√©s cient√≠fico se justificar√° por la plausibilidad de la pregunta de investigaci√≥n, la cual abrir√° la posibilidad de dise√±ar intervenciones basadas en evidencia.",
        "Las estad√≠sticas m√°s recientes mostrar√°n una prevalencia creciente y una morbimortalidad elevada asociada al fen√≥meno, superando umbrales de alerta en varios continentes.",
        "En Am√©rica Latina, y particularmente en el Per√∫, dichos indicadores reflejar√°n disparidades marcadas entre regiones y grupos socioecon√≥micos, impactando la sostenibilidad de los sistemas sanitarios y las econom√≠as familiares.",
        "La revisi√≥n de la literatura revelar√° una escasez de estudios con dise√±os robustos y muestras representativas, as√≠ como la predominancia de investigaciones en contextos poco comparables.",
        "Persistir√°n vac√≠os metodol√≥gicos y ausencia de modelos de an√°lisis integrales que contemplen las variables econ√≥micas y socioculturales vinculadas al problema.",
        "La investigaci√≥n contribuir√° al Objetivo de Desarrollo Sostenible 3, meta 3.8, orientada a garantizar una vida sana y promover el bienestar para todos en todas las edades.",
        f"¬øEn qu√© medida {title_l} se asociar√° con los resultados planteados en el objetivo general propuesto?",
        "Te√≥ricamente, el trabajo ampliar√° los marcos de referencia actuales al integrar perspectivas epidemiol√≥gicas, econ√≥micas y de comportamiento, fortaleciendo la explicaci√≥n causal del fen√≥meno.",
        "En el plano pr√°ctico, los hallazgos permitir√°n optimizar estrategias de prevenci√≥n y asignaci√≥n de recursos, beneficiando la toma de decisiones de gestores y cl√≠nicos.",
        "Metodol√≥gicamente, se emplear√° un dise√±o de investigaci√≥n riguroso que garantizar√° validez interna y externa, con mediciones estandarizadas y an√°lisis multivariados.",
        "Desde la perspectiva social, la generaci√≥n de conocimiento fomentar√° la igualdad de oportunidades y reforzar√° la cohesi√≥n comunitaria al reducir las brechas identificadas."
    ]
    paragraphs = [build_paragraph(b) for b in blocks]
    intro = "\n\n".join(paragraphs)
    # Rellenar hasta min_words
    i = 0
    while len(intro.split()) < min_words:
        intro += "\n\n" + paragraphs[i % len(paragraphs)]
        i += 1
    return intro

# --------- Bases Te√≥ricas ---------
def generate_theoretical_bases(objective: str) -> str:
    core = (
        f"El marco te√≥rico contextualizar√° {objective.lower()}, articulando conceptos derivados del Modelo Socio‚ÄëEcol√≥gico, la Teor√≠a del Comportamiento Planificado y la Econom√≠a de la Salud. "
        "Se establecer√° la variable independiente como determinante principal y la variable dependiente como resultado medible, mientras que factores de confusi√≥n actuar√°n como covariables. "
        "La integraci√≥n de estos enfoques permitir√° explicar las rutas causales, fundamentar la selecci√≥n de indicadores y definir supuestos para los an√°lisis estad√≠sticos."
    )
    return wrap(core)

# --------- Hip√≥tesis ---------
def generate_hypotheses(title: str) -> str:
    hip_inv = f"Hip√≥tesis de investigaci√≥n: la presencia de {title.lower()} ejercer√° un efecto significativo sobre la variable dependiente planteada en el objetivo general."
    hip_est = (
        "Hip√≥tesis nula (H0): Œ≤1 = 0 ‚Äî no existir√° asociaci√≥n entre la variable independiente y la dependiente.\n"
        "Hip√≥tesis alternativa (H1): Œ≤1 ‚â† 0 ‚Äî existir√° una asociaci√≥n estad√≠sticamente significativa entre ambas variables."
    )
    return wrap(hip_inv) + "\n\n" + wrap(hip_est)

# --------- DOCX builder corregido ---------
def build_docx(intro: str, bases: str, hyps: str) -> bytes:
    doc = Document()
    doc.add_heading("Proyecto de Tesis ‚Äì Secciones Generadas", level=1)

    # Introducci√≥n
    doc.add_heading("Introducci√≥n", level=2)
    for line in intro.splitlines():
        doc.add_paragraph(line)
    doc.add_page_break()

    # Bases Te√≥ricas
    doc.add_heading("Bases Te√≥ricas", level=2)
    for line in bases.splitlines():
        doc.add_paragraph(line)
    doc.add_page_break()

    # Hip√≥tesis
    doc.add_heading("Hip√≥tesis", level=2)
    for line in hyps.splitlines():
        doc.add_paragraph(line)

    buffer = BytesIO()
    doc.save(buffer)
    return buffer.getvalue()

# --------- Interfaz Streamlit ---------
st.title("üìù Generador Autom√°tico de Introducciones de Tesis (local)")
with st.sidebar:
    st.header("Entradas")
    title_input = st.text_input("T√≠tulo de la Investigaci√≥n")
    objective_input = st.text_area("Objetivo General")

if st.sidebar.button("Generar Secciones"):
    intro_text = generate_introduction(title_input, objective_input)
    bases_text = generate_theoretical_bases(objective_input)
    hyps_text = generate_hypotheses(title_input)

    # Mostrar en pantalla
    st.subheader("Introducci√≥n")
    st.markdown(intro_text)

    st.subheader("Bases Te√≥ricas")
    st.markdown(bases_text)

    st.subheader("Hip√≥tesis")
    st.markdown(hyps_text)

    # Bot√≥n de descarga
    docx_data = build_docx(intro_text, bases_text, hyps_text)
    st.download_button(
        "Descargar DOCX",
        data=docx_data,
        file_name=f"secciones_tesis_{date.today()}.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )


